PARSER_BEGIN(MyParser)
package edu.curtin.saed.assignment2;

import java.util.ArrayList;
import java.util.List;

public class MyParser
{
    Simulation sim;

    public MyParser(Simulation sim, System in)
    {
        this.sim = sim;
    }
}
PARSER_END(MyParser)

SKIP: { " " | "\n" | "\r" | "\t" }

TOKEN: {
    < OBSTACLE: "obstacle" >
    | < COLLECTABLE: "item" >
    | < AT: "at" >
    | < SIZE: "size" >
    | < REQUIRES: "requires" >
    | < STRING: "\"" (~["\"", "\n", "\r"])* "\"" > // Any charcter except newlines surrounded by '"'
    | < COORDINATE: "(" (["0"-"9"])+ "," (["0"-"9"])+ ")" >

     // catch all unknown token TODO: Maybe remove later
    | < UNKNOWN_TOKEN: (~["\n", "\r", "\\", ",", "{", "}"])+ >

}

void run() :
{}
{
    readObstacles()
}

void readObstacles() :
{}
{
    (
        <OBSTACLE>
        "{"
        {
            // New Lists to store the coordinates and requirements
            List<int[]> coordinates = new ArrayList<>();
            List<String> requirements = new ArrayList<>();
        }
        <AT>
            <COORDINATE>
            {
                // Parse first coordinate token and add to the list
                String[] xy = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy[0]), Integer.parseInt(xy[1]) });
            }
        (
            "," <COORDINATE>
            {
                // Parse additional coordinates and add to the list
                String[] xy = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy[0]), Integer.parseInt(xy[1]) });
            }
        )*
        <REQUIRES>
                <STRING>
                {
                    // Add first requirement string (remove quotes)
                    String req = token.image.replaceAll("\"", "");
                    requirements.add(req);
                }
                (
                    "," <STRING>
                    {
                        // Add additional requirement strings (remove quotes)
                        String req = token.image.replaceAll("\"", "");
                        requirements.add(req);
                    }
                )*
                "}"
        {
         // Create Obstacle objects
         List<Obstacle> createdObstacles = new ArrayList<>();
        for(int[] coord : coordinates)
        {
            Obstacle obs = new Obstacle(coord[0], coord[1], "#", false);

            // Add all required items
            for(String r : requirements)
            {
                obs.addRequiredItem(r);
            }

            createdObstacles.add(obs);
        }
        sim.addObstacles(createdObstacles);
        }
    )+
}
