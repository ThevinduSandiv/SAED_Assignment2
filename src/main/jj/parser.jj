PARSER_BEGIN(MyParser)
package edu.curtin.saed.assignment2;

import java.util.ArrayList;
import java.util.List;

public class MyParser
{
}
PARSER_END(MyParser)

SKIP: { " " | "\n" | "\r" | "\t" }

TOKEN: {
    < OBSTACLE: "obstacle" >
    | < COLLECTABLE: "item" >
    | < AT: "at" >
    | < MESSAGE: "message" >
    | < SIZE: "size" >
    | < REQUIRES: "requires" >
    | < STRING: "\"" (~["\"", "\n", "\r"])* "\"" > // Any charcter except newlines surrounded by '"'
    | < COORDINATE: "(" (["0"-"9"])+ "," (["0"-"9"])+ ")" >

}

void run(Simulation sim) :
{}
{
    ( readObstacles(sim) | readCollectables(sim) )*
}

void readObstacles(Simulation sim) :
{}
{
    (
        <OBSTACLE>
        "{"
        {
            // New Lists to store the coordinates and requirements
            List<int[]> coordinates = new ArrayList<int[]>();
            List<String> requirements = new ArrayList<String>();
        }
        <AT>
            <COORDINATE>
            {
                // Parse first coordinate token and add to the list
                String[] xy1 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy1[0]), Integer.parseInt(xy1[1]) });
            }
        (
            "," <COORDINATE>
            {
                // Parse additional coordinates and add to the list
                String[] xy2 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy2[0]), Integer.parseInt(xy2[1]) });
            }
        )*
        <REQUIRES>
                <STRING>
                {
                    // Add first requirement string (remove quotes)
                    String req1 = token.image.replaceAll("\"", "");
                    requirements.add(req1);
                }
                (
                    "," <STRING>
                    {
                        // Add additional requirement strings (remove quotes)
                        String req2 = token.image.replaceAll("\"", "");
                        requirements.add(req2);
                    }
                )*
                "}"
        {
         // Create Obstacle objects
         List<Obstacle> createdObstacles = new ArrayList<Obstacle>();
        for(int[] coord : coordinates)
        {
            Obstacle obs = new Obstacle(coord[0], coord[1], "#", false);

            // Add all required items
            for(String r : requirements)
            {
                obs.addRequiredItem(r);
            }

            createdObstacles.add(obs);
        }
        sim.addObstacles(createdObstacles);
        }
    )+
}

void readCollectables(Simulation sim) :
{}
{
    (
        <COLLECTABLE>
        <STRING>
        {
            // Get the item name (remove quotes)
            String itemName = token.image.replaceAll("\"", "");
        }
        "{"
        {
            // New Lists to store the coordinates and message
            List<int[]> coordinates = new ArrayList<int[]>();
            String message = "";
        }
        <AT>
            <COORDINATE>
            {
                // Parse first coordinate token and add to the list
                String[] xy1 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy1[0]), Integer.parseInt(xy1[1]) });
            }
        (
            "," <COORDINATE>
            {
                // Parse additional coordinates and add to the list
                String[] xy2 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy2[0]), Integer.parseInt(xy2[1]) });
            }
        )*
        <MESSAGE> <STRING>
        {
            // Get the message string (remove quotes)
            message = token.image.replaceAll("\"", "");
        }
        "}"
        {
         // Create Collectable objects
         List<Collectable> createdCollectables = new ArrayList<Collectable>();
        for(int[] coord : coordinates)
        {
            // Use item name as both name and icon, or you could modify this as needed
            Collectable coll = new Collectable(itemName, coord[0], coord[1], message, true, "I");
            createdCollectables.add(coll);
        }
        sim.addCollectables(createdCollectables);
        }
    )+
}
