/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package edu.curtin.saed.assignment2;

import java.util.ArrayList;
import java.util.List;

public class MyParser implements MyParserConstants {

  static final public void run(Simulation sim) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBSTACLE:
      case COLLECTABLE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBSTACLE:
        readObstacles(sim);
        break;
      case COLLECTABLE:
        readCollectables(sim);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void readObstacles(Simulation sim) throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(OBSTACLE);
      jj_consume_token(13);
            // New Lists to store the coordinates and requirements
            List<int[]> coordinates = new ArrayList<int[]>();
            List<String> requirements = new ArrayList<String>();
      jj_consume_token(AT);
      jj_consume_token(COORDINATE);
                // Parse first coordinate token and add to the list
                String[] xy1 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy1[0]), Integer.parseInt(xy1[1]) });
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(14);
        jj_consume_token(COORDINATE);
                // Parse additional coordinates and add to the list
                String[] xy2 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy2[0]), Integer.parseInt(xy2[1]) });
      }
      jj_consume_token(REQUIRES);
      jj_consume_token(STRING);
                    // Add first requirement string (remove quotes)
                    String req1 = token.image.replaceAll("\u005c"", "");
                    requirements.add(req1);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(14);
        jj_consume_token(STRING);
                        // Add additional requirement strings (remove quotes)
                        String req2 = token.image.replaceAll("\u005c"", "");
                        requirements.add(req2);
      }
      jj_consume_token(15);
         // Create Obstacle objects
         List<Obstacle> createdObstacles = new ArrayList<Obstacle>();
        for(int[] coord : coordinates)
        {
            Obstacle obs = new Obstacle(coord[0], coord[1], "#", false);

            // Add all required items
            for(String r : requirements)
            {
                obs.addRequiredItem(r);
            }

            createdObstacles.add(obs);
        }
        sim.addObstacles(createdObstacles);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBSTACLE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void readCollectables(Simulation sim) throws ParseException {
    label_5:
    while (true) {
      jj_consume_token(COLLECTABLE);
      jj_consume_token(STRING);
            // Get the item name (remove quotes)
            String itemName = token.image.replaceAll("\u005c"", "");
      jj_consume_token(13);
            // New Lists to store the coordinates and message
            List<int[]> coordinates = new ArrayList<int[]>();
            String message = "";
      jj_consume_token(AT);
      jj_consume_token(COORDINATE);
                // Parse first coordinate token and add to the list
                String[] xy1 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy1[0]), Integer.parseInt(xy1[1]) });
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        jj_consume_token(14);
        jj_consume_token(COORDINATE);
                // Parse additional coordinates and add to the list
                String[] xy2 = token.image.replaceAll("[()]", "").split(",");
                coordinates.add(new int[]{ Integer.parseInt(xy2[0]), Integer.parseInt(xy2[1]) });
      }
      jj_consume_token(MESSAGE);
      jj_consume_token(STRING);
            // Get the message string (remove quotes)
            message = token.image.replaceAll("\u005c"", "");
      jj_consume_token(15);
         // Create Collectable objects
         List<Collectable> createdCollectables = new ArrayList<Collectable>();
        for(int[] coord : coordinates)
        {
            // Use item name as both name and icon, or you could modify this as needed
            Collectable coll = new Collectable(itemName, coord[0], coord[1], message, true, "I");
            createdCollectables.add(coll);
        }
        sim.addCollectables(createdCollectables);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLLECTABLE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x60,0x4000,0x4000,0x20,0x4000,0x40,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
